buildscript {
    ext {
        mavenRepository = 'http://elpdtmvn/repository/internal/'
        springBootVersion = '1.3.6.RELEASE'
    }
    repositories.maven {
        url mavenRepository
    }
    dependencies {
        // @see http://start.spring.io/
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

repositories.maven {
    url mavenRepository
}

//apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'java'

apply plugin: 'groovy'
apply plugin: 'findbugs'

apply plugin: 'spring-boot'
apply plugin: 'war'

// @see http://docs.spring.io/spring-boot/docs/current/reference/html/
//      build-tool-plugins-gradle-plugin.html#build-tool-plugins-gradle-running-applications
//
// If devtools has been added to your project it will automatically monitor your application for changes.
// Alternatively, you can also run the application so that your static classpath resources (i.e. in
// src/main/resources by default) are reloadable in the live application, which can be helpful at development time.
//
bootRun {
    addResources = true

    // @see INSTALL.md
    environment 'STP_SVR_ID', 'dev'
    environment 'STP_LOG_PROFILE', 'dev'
    environment 'STP_APP_PROFILE', 'dev'
    environment 'STP_SERVICE_URL', 'http://localhost:9000'
    environment 'SSO_SERVICE_URL', 'https://elpdtmvn:9443/cas4'
}

sourceSets {
    test {
        groovy {
            srcDirs = ['src/test/java']
        }
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}
findbugs {
    effort = "max"
    reportLevel = "high"
    ignoreFailures = true
    sourceSets = [sourceSets.main]
}

apply from: 'build-deps.gradle'

// Dependencies for development
dependencies {

    /*-------------+
    |   DEV TOOL   |
    +=============*/

    // Classes Hot-Swap
    // @see https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html
    compile('org.springframework.boot:spring-boot-devtools')

    // Runtime for task:bootRun
    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')

    /*------------+
    |   TESTING   |
    +============*/

    // @see http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/unit-testing.html
    // @see http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/integration-testing.html#spring-mvc-test-framework

    // JUnit and Spock with Spring
    testCompile('org.spockframework:spock-spring:1.0-groovy-2.4')
    testCompile('org.springframework.boot:spring-boot-starter-test')

    // Mocks and Assertions
    testCompile('org.assertj:assertj-core:3.4.1')
    testCompile('com.jayway.jsonpath:json-path:2.2.0')

}
